;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;      File        :   ion_guide.gem                                             ;;;;;;;;;;
;;;;;;;;;;      Author      :   X. Chen                                                   ;;;;;;;;;;
;;;;;;;;;;      Description :   geometric definition of an ion guide                      ;;;;;;;;;;
;;;;;;;;;;      Note        :   it is made of stacked ring electrodes and housed in       ;;;;;;;;;;
;;;;;;;;;;                      a CF100 vacuum pipe                                       ;;;;;;;;;;
;;;;;;;;;;      License     :   GNU GPLv3                                                 ;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;                        Import and calculate parameters                         ;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

$(
local IG                        =   _G.shared_table

local ring_focus_pa_num         =   IG.ring_focus_pa_num
local ring_focus_inner_radii    =   IG.ring_focus_inner_radii
local ring_focus_pitches        =   IG.ring_focus_pitches
local ring_focus_thicknesses    =   IG.ring_focus_thicknesses
local ring_focus_number         =   IG.ring_focus_number

local ring_big_pa_num           =   IG.ring_big_pa_num
local ring_big_inner_radius     =   IG.ring_big_inner_radius
local ring_big_pitch            =   IG.ring_big_pitch
local ring_big_thickness        =   IG.ring_big_thickness
local ring_big_number           =   IG.ring_big_number

local ring_blend                =   IG.ring_blend
local ring_outer_radius         =   IG.ring_outer_radius

local cap_pa_num                =   IG.cap_pa_num
local cap_thickness             =   IG.cap_thickness
local cap_blend                 =   IG.cap_blend
local cap_left_gap              =   IG.cap_left_gap
local cap_left_inner_radius     =   IG.cap_left_inner_radius
local cap_right_gap             =   IG.cap_right_gap
local cap_right_inner_radius    =   IG.cap_right_inner_radius
local cap_outer_radius          =   IG.cap_outer_radius

local pipe_pa_num               =   IG.pipe_pa_num
local pipe_inner_radius         =   IG.pipe_inner_radius
local pipe_thickness            =   IG.pipe_thickness
local pipe_left_gap             =   IG.pipe_left_gap
local pipe_right_gap            =   IG.pipe_right_gap

local grid_size                 =   IG.grid_size
)

$(
local cap_left_anchor       =   pipe_thickness + pipe_left_gap
local ring_focus_anchor     =   cap_left_anchor + cap_thickness + cap_left_gap
local ring_big_anchor       =   ring_focus_anchor
for k, ring_focus_pitch in next, ring_focus_pitches, nil do ring_big_anchor = ring_big_anchor + ring_focus_pitch end
local cap_right_anchor      =   ring_big_anchor + ring_big_pitch * ring_big_number + cap_right_gap
local total_length          =   cap_right_anchor + cap_thickness + pipe_right_gap + pipe_thickness

local grid_axial_num        =   math.ceil( total_length                        / grid_size) + 1
local grid_radial_num       =   math.ceil((pipe_inner_radius + pipe_thickness) / grid_size) + 1
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;                             Define potential array                             ;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

pa_define($(grid_axial_num), $(grid_radial_num), 1, cylindrical, y, electrostatic,, $(grid_size), surface=fractional)

; stacked rings
# for k, ring_focus_inner_radius in next, ring_focus_inner_radii, nil do
# local ring_focus_pitch     = ring_focus_pitches[k]
# local ring_focus_thickness = ring_focus_thicknesses[k]
electrode( $(ring_focus_pa_num + k - 1) ) { locate( $(ring_focus_anchor + ring_focus_pitch / 2), 0 ) { fill {
    within { box( -$(ring_focus_thickness / 2 - ring_blend), $(ring_focus_inner_radius), $(ring_focus_thickness / 2 - ring_blend), $(ring_outer_radius) )}
    within { box( -$(ring_focus_thickness / 2), $(ring_blend + ring_focus_inner_radius), $(ring_focus_thickness / 2), $(ring_outer_radius) )}
    within { circle( -$(ring_focus_thickness / 2 - ring_blend), $(ring_blend + ring_focus_inner_radius), $(ring_blend) )}
    within { circle(  $(ring_focus_thickness / 2 - ring_blend), $(ring_blend + ring_focus_inner_radius), $(ring_blend) )}
}}}
# ring_focus_anchor = ring_focus_anchor + ring_focus_pitch
# end

# for i = 0, ring_big_number - 1 do
electrode( $(ring_big_pa_num + i) ) { locate( $(ring_big_anchor + ring_big_pitch / 2 + ring_big_pitch * i), 0 ) { fill {
    within { box( -$(ring_big_thickness / 2 - ring_blend), $(ring_big_inner_radius), $(ring_big_thickness / 2 - ring_blend), $(ring_outer_radius) )}
    within { box( -$(ring_big_thickness / 2), $(ring_blend + ring_big_inner_radius), $(ring_big_thickness / 2), $(ring_outer_radius) )}
    within { circle( -$(ring_big_thickness / 2 - ring_blend), $(ring_blend + ring_big_inner_radius), $(ring_blend) )}
    within { circle(  $(ring_big_thickness / 2 - ring_blend), $(ring_blend + ring_big_inner_radius), $(ring_blend) )}
}}}
# end

; caps
electrode( $(cap_pa_num) ) { locate( $(cap_left_anchor + cap_thickness / 2), 0 ) { fill {
    within { box( -$(cap_thickness / 2 - cap_blend), $(cap_left_inner_radius), $(cap_thickness / 2 - cap_blend), $(cap_outer_radius) )}
    within { box( -$(cap_thickness / 2), $(cap_blend + cap_left_inner_radius), $(cap_thickness / 2), $(cap_outer_radius) )}
    within { circle( -$(cap_thickness / 2 - cap_blend), $(cap_blend + cap_left_inner_radius), $(cap_blend) )}
    within { circle(  $(cap_thickness / 2 - cap_blend), $(cap_blend + cap_left_inner_radius), $(cap_blend) )}
}}}

electrode( $(cap_pa_num + 1) ) { locate( $(cap_right_anchor + cap_thickness / 2), 0 ) { fill {
    within { box( -$(cap_thickness / 2 - cap_blend), $(cap_right_inner_radius), $(cap_thickness / 2 - cap_blend), $(cap_outer_radius) )}
    within { box( -$(cap_thickness / 2), $(cap_blend + cap_right_inner_radius), $(cap_thickness / 2), $(cap_outer_radius) )}
    within { circle( -$(cap_thickness / 2 - cap_blend), $(cap_blend + cap_right_inner_radius), $(cap_blend) )}
    within { circle(  $(cap_thickness / 2 - cap_blend), $(cap_blend + cap_right_inner_radius), $(cap_blend) )}
}}}

; vacuum pipe
electrode( $(pipe_pa_num) ) { fill {
    within { box( 0, 0, $(pipe_thickness), $(pipe_inner_radius + pipe_thickness) )}
    within { box( 0, $(pipe_inner_radius), $(total_length), $(pipe_inner_radius + pipe_thickness) )}
    within { box( $(total_length - pipe_thickness), 0, $(total_length), $(pipe_inner_radius + pipe_thickness) )}
}}
